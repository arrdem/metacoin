* Metacoin
  Metacoin provides clojure bindings for several cryptocurrency
  json-rpc APIs. Support is provided for Bitcoin, Litecoin, Dogecoin
  and Namecoin. Patches adding support for other coins are welcome.
  
* Installation
  
** [[https://github.com/technomancy/leiningen][leiningen]]
   Add this to your =project.clj='s =:dependencies=:
   
   #+BEGIN_EXAMPLE
   [me.arrdem/metacoin "0.1.0-SNAPSHOT"]
   #+END_EXAMPLE
   
* Usage
  To call the method (for example) =getinfo= on a bitcoind according
  to the local default =bitcoin.conf= file:
  #+BEGIN_EXAMPLE
   user=> (require '[metacoin :as m])
   ;;=> nil
   user=> (m/getinfo {:coin "bitcoin"})
   ;;=> {"timeoffset" 0, "protocolversion" 70001, "blocks" 111908, "errors" "",
         "testnet" true, "proxy" "", "connections" 4, "version" 80500,
         "keypoololdest" 1380388750, "paytxfee" 0E-8M,
         "difficulty" 4642.44443532M, "keypoolsize" 101, "balance" 0E-8M,
         "walletversion" 60000}
  #+END_EXAMPLE
  
  Every API call will accept a configuration map as the first
  argument. Configurations should contain the keys
  =:rpcpassword :rpcuser :testnet :rpcport= and =:rpchost=. If any of
  these keys are missing, then the =:coin= key will be read to
  determine what coin you are trying to interact with. If the =:coin=
  key is nil, then "bitcoin" will be used by default. The value of
  =:coin= will be used to locate the appropriate coin config file and
  parse it into an options map. Settings passed in the options map
  take precidence over options set in the config file.

  When =:coin= is provided some checking is done to provide warnings
  when unsupported API calls are made. For instance invoking methods
  defined only over Namecoin with a configuration stating it was
  built for Bitcoin will evoke a warning message to standard error
  but will execute normally.

  #+BEGIN_EXAMPLE
   user=> (def config {:rpcpassword "PASSWORD", :rpcuser "USR", :testnet true,
                       :rpcport 18332, :rpchost "http://127.0.0.1"})
   ;;=> #'user/config
   user=> (m/getbalace :config config) ; no file is read to get configs
   ;;=> 2.718281M
  #+END_EXAMPLE
  
  It is possible to use a different configuration file by
  passing its path to =metacoin.config/parse-config=:

  #+BEGIN_EXAMPLE
   user=> (require '[metacoin.config :only (parse-config)])
   ;;=> nil
   user=> (def config (parse-config "/path/to/my.conf"))
   ;;=> #'user/config
   user=> (m/getbalace :config config) ; no file is read to get configs
   ;;=> 777M
  #+END_EXAMPLE
  
  
* Future Work
  - [ ] Add tests for all the rpc methods.
  - [ ] Add more input verification.


* Changes
  See CHANGES.org at the root of this repo.

  
* License
  #+BEGIN_SRC
  Metacoin is derived from clj-btc, copyright 2013 Aviad Reich.
  Metacoin is derived from clj-btc, copyright 2014 Sean Grove.
  Metacoin is copyright 2014 Reid McKenzie.

  The use and distribution terms for this software are covered by the
  Apache License, Version 2.0
  ([[http://www.apache.org/licenses/LICENSE-2.0.txt]]), which can be found
  in the file LICENSE at the root of this distribution. By using this
  software in any fashion, you are agreeing to be bound by the terms of
  this license. You must not remove this notice, or any other, from
  this software.
  #+END_SRC
